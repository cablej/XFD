---
name: Backend Pipeline

on:
  push:
    branches:
      - develop
      - production
    paths:
      - backend/**
      - .github/workflows/backend.yml
  pull_request:
    branches:
      - develop
      - production
    paths:
      - backend/**
      - .github/workflows/backend.yml

defaults:
  run:
    working-directory: ./backend

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npm run lint
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Run site locally
        run: |
          cp dev.env.example .env
          docker-compose up -d db backend es
          npm install -g wait-port
          wait-port -t 3000 5432 9200 9300
        working-directory: ./
      - name: Sync database
        run: npm run syncdb
        working-directory: ./backend
      - name: Test
        run: npm run test -- --collectCoverage --silent
      - name: Package
        run: npx sls package
        env:
          SLS_DEBUG: '*'
  test_worker:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npx webpack --config webpack.worker.config.js
      - name: Run db locally
        run: |
          cp dev.env.example .env
          docker-compose up -d db
          npm install -g wait-port
          wait-port -t 3000 5432
        working-directory: ./
      - name: Test
        run: node dist/worker.bundle.js
        env:
          CROSSFEED_COMMAND_OPTIONS: '{"scanName": "test"}'
          DB_USERNAME: crossfeed
          DB_PASSWORD: password
  test_python:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v5.0.0
        with:
          python-version: '3.10'
      - name: Copy .env file
        run: cp ../dev.env.example .env
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: pip-
      - run: pip install -r worker/requirements.txt
      - run: pytest
  build_worker:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Build worker container
        run: npm run build-worker
        working-directory: ./backend
  